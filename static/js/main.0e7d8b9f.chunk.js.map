{"version":3,"sources":["store.js","NavBar/NavBar.js","ArtWorkPreview/ArtWorkPreview.js","FavoritesPage/FavoritesPage.js","DailyCurationTitle/DailyCurationTitle.js","apiCalls.js","DailyCuration/DailyCuration.js","ExpandedView/ExpandedView.js","Filter/Filter.js","NothingSelectedAlert/NothingSelectedAlert.js","OtherWorkByArtist/OtherWorkByArtist.js","App/App.js","serviceWorker.js","index.js","ExpandedView/like.png","ExpandedView/not-liked.png","Filter/go.png"],"names":["StoreContext","createContext","initialState","dailyCurationTopics","dailyCurationTopic","currentArtwork","favorites","cultureOrArtistQuery","mediumQuery","filterByDisplay","reducer","state","action","type","Math","floor","random","length","artDetails","filter","fave","objectID","Error","StoreProvider","children","useReducer","dispatch","Provider","value","useStore","useContext","NavBar","getNavigationContainer","containerClass","className","exact","to","activeClassName","onClick","menu","Item","overlay","MenuOutlined","ArtWorkPreview","artwork","title","data-testid","src","primaryImageSmall","alt","FavoritesPage","map","key","DailyCurationTitle","useEffect","fetchLink","getDailyCollectionIds","theme","a","fetch","response","json","data","console","log","getDailyCollection","ids","Promise","all","id","collectionsRes","featuredCollection","getOtherArtByArtist","artist","fetchByArtistOrCulture","query","fetchByArtistOrCultureAndOnDisplay","fetchByMedium","medium","subCats","DailyCuration","dataObjects","page","useState","collection","updateCollection","isLoading","setIsLoading","fetchData","topic","objectIDs","splice","search","artworkIds","total","fetchByMediumQuery","color","height","width","ExpandedView","some","like","notLiked","artistDisplayName","artistDisplayBio","objectDate","dimensions","href","objectURL","target","Filter","searchTerms","updateSearch","handleClick","onChange","e","name","charAt","toUpperCase","slice","placeholder","goIcon","role","aria-pressed","tabIndex","onKeyDown","htmlFor","checked","NothingSelectedAlert","OtherWorkByArtist","artistLastName","split","artSelection","updateArtSelection","index","indexOf","art","findCurrentArtwork","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"geAEMA,EAAeC,0BACfC,EAAe,CACnBC,oBAAqB,CAAC,MAAO,YAAa,WAAY,UACtDC,mBAAoB,GACpBC,eAAgB,GAChBC,UAAW,GACXC,qBAAsB,GACtBC,YAAa,GACbC,iBAAiB,GAGbC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,kBACH,OAAO,2BACFF,GADL,IAEEP,mBAAoBO,EAAMR,oBACtBW,KAAKC,MAAMD,KAAKE,SAAWL,EAAMR,oBAAoBc,WAE7D,IAAK,mBACH,OAAO,2BACFN,GADL,IAEEP,mBAAoB,KAGxB,IAAK,uBACH,OAAO,2BACFO,GADL,IAEEN,eAAe,eAAMO,EAAOM,cAGhC,IAAK,iBACH,OAAO,2BACFP,GADL,IAEEL,UAAU,GAAD,mBAAMK,EAAML,WAAZ,gBAA4BM,EAAOM,gBAGhD,IAAK,sBACH,OAAO,2BACFP,GADL,IAEEL,UAAWK,EAAML,UAAUa,QACzB,SAACC,GAAD,OAAUA,EAAKC,WAAaT,EAAOM,WAAWG,cAIpD,IAAK,6BACH,OAAO,2BACFV,GADL,IAEEJ,qBAAsBK,EAAOL,uBAGjC,IAAK,oBACH,OAAO,2BACFI,GADL,IAEEH,YAAaI,EAAOJ,cAGxB,IAAK,wBACH,OAAO,2BACFG,GADL,IAEEF,gBAAiBG,EAAOH,kBAG5B,QACE,MAAM,IAAIa,MAAJ,iCAAoCV,EAAOC,SAI1CU,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACnBC,qBAAWf,EAASR,GADD,mBACtCS,EADsC,KAC/Be,EAD+B,KAG7C,OACE,kBAAC1B,EAAa2B,SAAd,CAAuBC,MAAO,CAAEjB,QAAOe,aACpCF,IAKMK,EAAW,kBAAMC,qBAAW9B,I,2BCxE5B+B,EAAS,WAAO,IACnBL,EAAaG,IAAbH,SAEFM,EAAyB,SAACC,GAAD,OAC7B,yBAAKC,UAAWD,GACd,kBAAC,IAAD,CAASE,OAAK,EAACC,GAAG,IAAIC,gBAAgB,eACpC,8CAEF,kBAAC,IAAD,CACED,GAAG,UACHC,gBAAgB,cAChBC,QAAS,kBACPZ,EAAS,CACPb,KAAM,6BACNN,qBAAsB,OAI1B,sCAEF,kBAAC,IAAD,CACE6B,GAAG,qBACHC,gBAAgB,cAChBC,QAAS,kBAAMZ,EAAS,CAAEb,KAAM,oBAAqBL,YAAa,OAElE,sCAEF,kBAAC,IAAD,CAAS4B,GAAG,aAAaC,gBAAgB,eACvC,2CAKAE,EACJ,kBAAC,IAAD,CAAML,UAAU,2BACd,kBAAC,IAAKM,KAAN,KACGR,EAAuB,YAK9B,OACE,gCACE,kBAAC,IAAD,CAAMI,GAAG,KACP,yBAAKF,UAAU,mBACb,wBAAIA,UAAU,SAAd,QACA,uBAAGA,UAAU,YAAb,8BAGHF,EAAuB,6BACtB,kBAAC,IAAD,CAAUS,QAASF,GACjB,kBAACG,EAAA,EAAD,CAAcR,UAAU,sBCrDrBS,G,cAAiB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvBlB,EAAaG,IAAbH,SAMR,OACE,kBAAC,IAAD,CAAMU,GAAE,yBAAoBQ,EAAQC,QAClC,yBACEC,cAAY,kBACZR,QARqB,WACzBZ,EAAS,CAAEb,KAAM,uBAAwBK,WAAY0B,KAQjDV,UAAU,gBACVa,IAAKH,EAAQI,kBACbC,IAAKL,EAAQC,WCfRK,EAAgB,WAAO,IAC1BvC,EAAUkB,IAAVlB,MAER,OACE,6BAASuB,UAAU,iBACjB,yCACA,yBAAKA,UAAU,mBAAmBY,cAAY,yBAC1CnC,EAAML,UAAUW,OAOhBN,EAAML,UAAU6C,KAAI,SAAC/B,GAAD,OAClB,kBAAC,EAAD,CAAgBwB,QAASxB,EAAMgC,IAAKhC,EAAKC,cAP3C,yBACEa,UAAU,eACVe,IAAI,mDACJF,IAAI,wB,OCXHM,G,OAAqB,WAAO,IAAD,EACVxB,IAApBlB,EAD8B,EAC9BA,MAAOe,EADuB,EACvBA,SAQf,OAPA4B,qBAAU,WAER,OADA5B,EAAS,CAAEb,KAAM,oBACV,WACLa,EAAS,CAAEb,KAAM,wBAElB,IAGD,yBAAKqB,UAAU,wBACb,sHAIA,4BAAKvB,EAAMP,mBAAX,Q,kDCpBAmD,G,OACJ,0DAEWC,EAAqB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,+EAELC,MAAM,GAAD,OACrBJ,EADqB,6DACyCE,IAHzC,cAEtBG,EAFsB,gBAITA,EAASC,OAJA,cAItBC,EAJsB,yBAKnBA,GALmB,kCAO1BC,QAAQC,IAAR,MAP0B,0DAAH,sDAWrBC,EAAkB,uCAAG,WAAOC,GAAP,eAAAR,EAAA,+EAEQS,QAAQC,IACrCF,EAAIf,IAAJ,uCAAQ,WAAOkB,GAAP,eAAAX,EAAA,sEACqBC,MAAM,GAAD,OAC3BJ,EAD2B,sBACJc,IAFtB,cACFC,EADE,yBAGCA,EAAeT,QAHhB,2CAAR,wDAHqB,cAEnBU,EAFmB,yBAShBA,GATgB,gCAWvBR,QAAQC,IAAR,MAXuB,yDAAH,sDAelBQ,EAAmB,uCAAG,WAAOC,GAAP,iBAAAf,EAAA,+EAEVC,MAAM,GAAD,OAAIJ,EAAJ,4CAAiDkB,IAF5C,cAE3Bb,EAF2B,gBAGdA,EAASC,OAHK,cAG3BC,EAH2B,yBAIxBA,GAJwB,kCAO7BC,QAAQC,IAAR,MAP6B,0DAAH,sDAWnBU,EAAsB,uCAAG,WAAOC,GAAP,iBAAAjB,EAAA,+EAEbC,MAAM,GAAD,OAAIJ,EAAJ,2DAAgEoB,IAFxD,cAE9Bf,EAF8B,gBAGjBA,EAASC,OAHQ,cAG9BC,EAH8B,yBAI3BA,GAJ2B,kCAOlCC,QAAQC,IAAR,MAPkC,0DAAH,sDAWtBY,EAAkC,uCAAG,WAAOD,GAAP,iBAAAjB,EAAA,+EAEzBC,MAAM,GAAD,OACrBJ,EADqB,yEACqDoB,IAHjC,cAE1Cf,EAF0C,gBAK7BA,EAASC,OALoB,cAK1CC,EAL0C,yBAMvCA,GANuC,kCAQ9CC,QAAQC,IAAR,MAR8C,0DAAH,sDAYlCa,EAAa,uCAAG,WAAOC,EAAQC,GAAf,iBAAArB,EAAA,+EAEJC,MAAM,GAAD,OACrBJ,EADqB,4BACQuB,EADR,cACoBA,IAHrB,cAErBlB,EAFqB,gBAKRA,EAASC,OALD,cAKrBC,EALqB,yBAMlBA,GANkB,kCAQzBC,QAAQC,IAAR,MARyB,0DAAH,wDChDbgB,EAAgB,SAAC,GAAc,IAItCC,EAJ0BC,EAAW,EAAXA,KACtBvE,EAAUkB,IAAVlB,MADiC,EAEFwE,mBAAS,IAFP,mBAElCC,EAFkC,KAEtBC,EAFsB,OAGPF,oBAAS,GAHF,mBAGlCG,EAHkC,KAGvBC,EAHuB,KAMzCjC,qBAAU,WAER,OADAkC,IACO,WACLH,EAAiB,IACjBE,GAAa,MAEd,CAAC5E,IAEJ,IAAM6E,EAAS,uCAAG,gCAAA9B,EAAA,yDACH,mBAATwB,EADY,wBAEVO,EAAQ9E,EAAMP,mBAFJ,SAGGoD,EAAsBiC,GAHzB,YAGV3B,EAHU,QAIL4B,UAJK,gCAI6B5B,EAAK4B,UAAUC,OAAO,EAAG,IAJtD,OAIM7B,EAAK4B,UAJX,+BAKMzB,EAAmBH,EAAK4B,WAL9B,QAKdT,EALc,OAMdI,EAAiBJ,GACjBM,GAAa,GAPC,WASH,sBAATL,EATY,kCAUSR,EAAuB/D,EAAMJ,qBAAqBqF,QAV3D,eAUVC,EAVU,QAWCC,MAAQ,MACrBD,EAAWH,UAAYG,EAAWH,UAAUC,OAAO,EAAG,MAZ1C,UAcM1B,EAAmB4B,EAAWH,WAdpC,eAcdT,EAdc,iBAeRxE,IAfQ,yBAgBR4E,EAAiBJ,GAhBT,yBAiBRM,GAAa,GAjBL,QAmBH,WAATL,GACFa,IApBc,4CAAH,qDAwBTA,EAAkB,uCAAG,4BAAArC,EAAA,sEACFmB,EAAclE,EAAMH,YAAYoF,QAD9B,cACrBC,EADqB,QAERC,MAAQ,MACrBD,EAAWH,UAAYG,EAAWH,UAAUC,OAAO,EAAG,MAHjC,SAKL1B,EAAmB4B,EAAWH,WALzB,cAKzBT,EALyB,gBAMjBxE,IANiB,wBAOjB4E,EAAiBJ,GAPA,yBAQjBM,GAAa,GARI,4CAAH,qDAWlB9E,EAAe,uCAAG,4BAAAiD,EAAA,0DAClB/C,EAAMF,gBADY,iCAEEmE,EAAmCjE,EAAMJ,qBAAqBqF,QAFhE,cAEjBC,EAFiB,QAGLC,MAAQ,MACrBD,EAAWH,UAAYG,EAAWH,UAAUC,OAAO,EAAG,MAJpC,SAMA1B,EAAmB4B,EAAWH,WAN9B,cAMpBT,EANoB,iBAOdM,GAAa,GAPC,4CAAH,qDAWrB,OACE,oCACGH,GAAczE,EAAMJ,sBACnB,uBAAG2B,UAAU,mBAAb,gBAA6CvB,EAAMJ,qBAAqBqF,OAAxE,KAEDR,GAAczE,EAAMH,aACnB,uBAAG0B,UAAU,mBAAb,gBAA6CvB,EAAMH,YAAYoF,OAA/D,KAEF,yBAAK1D,UAAU,mBAAmBY,cAAY,oBAC3CwC,GACC,kBAAC,IAAD,CAAQzE,KAAK,SAASmF,MAAM,QAAQC,OAAQ,IAAKC,MAAO,MAEzDd,GACCA,EAAWjC,KAAI,SAACP,GAAD,OACb,kBAAC,EAAD,CAAgBA,QAASA,EAASQ,IAAKR,EAAQvB,eAEjD+D,GAAczE,EAAMJ,sBAAwB,gDAC5C6E,GAAczE,EAAMH,aAAe,uBAAG0B,UAAU,mBAAb,uB,2CCrFhCiE,EAAe,SAAC,GAAiB,IAAfvD,EAAc,EAAdA,QAAc,EACff,IAApBlB,EADmC,EACnCA,MAAOe,EAD4B,EAC5BA,SAWf,OACE,yBAAKQ,UAAU,gBACb,yBACEA,UAAU,sBACVa,IAAKH,EAAQI,kBACbC,IAAKL,EAAQC,QAEf,yBAAKX,UAAU,mBACb,yBAAKA,UAAU,4BACb,4BAAKU,EAAQC,OACb,yBACEP,QApBa,WAChB3B,EAAML,UAAU8F,MAAK,SAAAhF,GAAI,OAAIA,EAAKC,WAAauB,EAAQvB,aAC1DK,EAAS,CAAEb,KAAM,sBAAuBK,WAAY0B,IAEhDjC,EAAML,UAAU8F,MAAK,SAAAhF,GAAI,OAAIA,EAAKC,WAAauB,EAAQvB,aAC3DK,EAAS,CAAEb,KAAM,iBAAkBK,WAAY0B,KAgBzCK,IACEtC,EAAML,UAAU8F,MAAK,SAAChF,GAAD,OAAUA,EAAKC,WAAauB,EAAQvB,YACrD,6BACA,iCAENa,UAAU,aACVa,IACEpC,EAAML,UAAU8F,MAAK,SAAChF,GAAD,OAAUA,EAAKC,WAAauB,EAAQvB,YACrDgF,IACAC,OAIT1D,EAAQ2D,mBACP,2BACE,8BAAO3D,EAAQ2D,mBADjB,IAC4C3D,EAAQ4D,kBAGtD,2BACE,uCADF,IACsB5D,EAAQ6D,YAE9B,2BACE,yCADF,IACwB7D,EAAQkC,QAEhC,2BACE,6CADF,IAC4BlC,EAAQ8D,YAEpC,2BACE,uBAAGC,KAAM/D,EAAQgE,UAAWC,OAAO,UAAnC,4B,kCCrDGC,EAAS,SAAC,GAAc,IAAZ5B,EAAW,EAAXA,KAAW,EACEC,mBAAS,CAACS,OAAQ,KADpB,mBAC3BmB,EAD2B,KACdC,EADc,KAE1BtF,EAAaG,IAAbH,SAER4B,qBAAU,WACR,OAAO,WACL5B,EAAS,CAAEb,KAAM,6BAA8BN,qBAAsB,KACrEmB,EAAS,CAAEb,KAAM,oBAAqBL,YAAa,QAEpD,IAEH,IAcMyG,EAAc,WACL,sBAAT/B,GACFxD,EAAS,CAAEb,KAAM,6BAA8BN,qBAAsBwG,IAE1D,WAAT7B,GACFxD,EAAS,CAAEb,KAAM,oBAAqBL,YAAauG,IAErDC,EAAa,CAACpB,OAAQ,MAYxB,OACE,6BAAS1D,UAAU,UACjB,yCACa,IACD,sBAATgD,EAA+B,oBAAsB,UAExD,0BAAMhD,UAAU,eACd,yBAAKA,UAAU,mBACb,2BACEgF,SA1CW,SAACC,GACpB,GAAa,WAATjC,EAAmB,CACrB,IAAMkC,EAAOD,EAAEN,OAAOO,KAChBxF,EAAQuF,EAAEN,OAAOjF,MAAMyF,OAAO,GAAGC,cAAgBH,EAAEN,OAAOjF,MAAM2F,MAAM,GACtE3B,EAAM,eAAKwB,EAAOxF,GACxBoF,EAAapB,OACR,CACL,IAAMwB,EAAOD,EAAEN,OAAOO,KAChBxF,EAAQuF,EAAEN,OAAOjF,MACjBgE,EAAM,eAAMwB,EAAOxF,GACzBoF,EAAapB,KAiCP1D,UAAU,eACVrB,KAAK,OACLe,MAAOmF,EAAYnB,OACnBwB,KAAK,SACLI,YACW,sBAATtC,EACI,uDACA,6DAGR,yBACEhD,UAAU,cACVe,IAAI,oBACJF,IAAK0E,IACLC,KAAK,SACLC,eAAa,QACbC,SAAS,IACTtF,QAAS2E,EACTY,UAAWZ,KAGf,yBAAK/E,UAAU,uBACb,2BAAO4F,QAAQ,cAAf,2CAGA,2BAAOjH,KAAK,WAAWwD,GAAG,aAAa+C,KAAK,aAAa9E,QA5CzC,SAAC6E,GACnBA,EAAEN,OAAOkB,SACXrG,EAAS,CAAEb,KAAM,wBAAyBJ,iBAAiB,IAExD0G,EAAEN,OAAOkB,SACZrG,EAAS,CAAEb,KAAM,wBAAyBJ,iBAAiB,WC3CpDuH,G,OAAuB,SAAC,GAAc,IAAZ9C,EAAW,EAAXA,KACrC,OACE,yBAAKhD,UAAW,wBAAyBgD,GACvC,4BAAc,sBAATA,EAA+B,gEAA/B,0CACgCA,EADhC,c,iBCEE+C,EAAoB,SAAC,GAAiB,IAAfrF,EAAc,EAAdA,QAC1BlB,EAAaG,IAAbH,SACJwG,EAAiBtF,EAAQ2D,kBAAkB4B,MAAM,KACrDD,EAAiBA,EAAeA,EAAejH,OAAS,GAHR,MAILkE,mBAAS,IAJJ,mBAIzCiD,EAJyC,KAI3BC,EAJ2B,KAM1C7C,EAAS,uCAAG,gCAAA9B,EAAA,sEACCc,EAAoB0D,GADrB,cACZpE,EADY,OAEZwE,EAAQxE,EAAK4B,UAAU6C,QAAQ3F,EAAQvB,UAC3CyC,EAAK4B,UAAUC,OAAO2C,EAAO,GAHb,SAIOrE,EAAmBH,EAAK4B,WAJ/B,cAIZN,EAJY,iBAKViD,EAAmBjD,GALT,4CAAH,qDAOf9B,qBAAU,WACRkC,MACC,CAAC5C,IAOJ,OACE,6BAASV,UAAU,sBAChBkG,GAAgB,0DACjB,kBAAC,IAAD,CAAiBlG,UAAU,sCACxBkG,GACCA,EAAajF,KAAI,SAACqF,GAAD,OACf,kBAAC,IAAD,CAAMpG,GAAE,yBAAoBoG,EAAI3F,OAASO,IAAKoF,EAAInH,UAChD,yBACEiB,QAAS,kBAbI,SAACkG,GAC1B9G,EAAS,CAAEb,KAAM,uBAAwBK,WAAYsH,IAY1BC,CAAmBD,IAClCzF,IAAKyF,EAAIxF,kBACTC,IAAKuF,EAAI3F,eCcV6F,MAvCf,WAAgB,IACN/H,EAAUkB,IAAVlB,MAER,OACE,yBAAKuB,UAAU,OACb,kBAAC,EAAD,MACA,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyG,KAAK,2BACV,kBAAC,EAAD,CAAc/F,QAASjC,EAAMN,iBAC7B,kBAAC,EAAD,CAAmBuC,QAASjC,EAAMN,kBAEpC,kBAAC,IAAD,CAAOsI,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,sBACV,kBAAC,EAAD,CAAQzD,KAAK,uBACXvE,EAAMJ,sBACN,kBAAC,EAAD,CAAsB2E,KAAK,sBAE5BvE,EAAMJ,sBACL,kBAAC,EAAD,CAAe2E,KAAK,uBAGxB,kBAAC,IAAD,CAAOyD,KAAK,WACV,kBAAC,EAAD,CAAQzD,KAAK,YACXvE,EAAMH,aAAe,kBAAC,EAAD,CAAsB0E,KAAK,WACjDvE,EAAMH,aAAe,kBAAC,EAAD,CAAe0E,KAAK,YAE5C,kBAAC,IAAD,CAAO/C,OAAK,EAACwG,KAAK,KAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAezD,KAAK,wBClCZ0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQC,SAAUC,SAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,SAINC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhG,QAAQgG,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.0e7d8b9f.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\n\nconst StoreContext = createContext();\nconst initialState = {\n  dailyCurationTopics: [\"sea\", \"sunflower\", \"mountain\", \"sunset\"],\n  dailyCurationTopic: \"\",\n  currentArtwork: {},\n  favorites: [],\n  cultureOrArtistQuery: \"\",\n  mediumQuery: \"\",\n  filterByDisplay: false\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"findRandomTopic\":\n      return {\n        ...state,\n        dailyCurationTopic: state.dailyCurationTopics[\n            Math.floor(Math.random() * state.dailyCurationTopics.length)]};\n    \n    case \"resetRandomTopic\":\n      return {\n        ...state,\n        dailyCurationTopic: \"\"\n      };\n    \n    case \"updateCurrentArtwork\":\n      return {\n        ...state,\n        currentArtwork: { ...action.artDetails }\n      };\n    \n    case \"addToFavorites\":\n      return {\n        ...state,\n        favorites: [...state.favorites, { ...action.artDetails }],\n      };\n    \n    case \"deleteFromFavorites\":\n      return {\n        ...state,\n        favorites: state.favorites.filter(\n          (fave) => fave.objectID !== action.artDetails.objectID\n        ),\n      };\n\n    case \"updateCultureOrArtistQuery\":\n      return {\n        ...state,\n        cultureOrArtistQuery: action.cultureOrArtistQuery,\n      };\n    \n    case \"updateMediumQuery\":\n      return {\n        ...state,\n        mediumQuery: action.mediumQuery,\n      };\n\n    case \"updateFilterByDisplay\":\n      return {\n        ...state,\n        filterByDisplay: action.filterByDisplay,\n      };\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n};\n\nexport const StoreProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <StoreContext.Provider value={{ state, dispatch }}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport const useStore = () => useContext(StoreContext);","import React from 'react'\nimport './NavBar.css'\nimport { NavLink, Link } from \"react-router-dom\"\nimport { useStore } from \"../store\";\nimport { Menu, Dropdown } from \"antd\";\n\nimport { MenuOutlined } from \"@ant-design/icons\";\n\nexport const NavBar = () => {\n  const { dispatch } = useStore();\n\n  const getNavigationContainer = (containerClass) => (\n    <div className={containerClass}>\n      <NavLink exact to=\"/\" activeClassName=\"active-page\">\n        <p>Daily Curation</p>\n      </NavLink>\n      <NavLink\n        to=\"/medium\"\n        activeClassName=\"active-page\"\n        onClick={() =>\n          dispatch({\n            type: \"updateCultureOrArtistQuery\",\n            cultureOrArtistQuery: \"\",\n          })\n        }\n      >\n        <p>Medium</p>\n      </NavLink>\n      <NavLink\n        to=\"/culture_or_artist\"\n        activeClassName=\"active-page\"\n        onClick={() => dispatch({ type: \"updateMediumQuery\", mediumQuery: \"\" })}\n      >\n        <p>Artist</p>\n      </NavLink>\n      <NavLink to=\"/favorites\" activeClassName=\"active-page\">\n        <p>Favorites</p>\n      </NavLink>\n    </div>\n  );\n\n  const menu = (\n    <Menu className=\"dropdown-hamburger-menu\">\n      <Menu.Item>\n        {getNavigationContainer(\"mobile\")}\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <header>\n      <Link to=\"/\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Muse</h1>\n          <p className=\"subtitle\">inspiration from the Met</p>\n        </div>\n      </Link>\n      {getNavigationContainer(\"desktop nav-btn-container\")}\n        <Dropdown overlay={menu}>\n          <MenuOutlined className=\"hamburger-menu\" />\n        </Dropdown>\n    </header>\n  );\n}","import React from \"react\";\nimport \"./ArtWorkPreview.css\";\nimport { useStore } from \"../store\";\nimport { Link } from \"react-router-dom\";\n\n\nexport const ArtWorkPreview = ({ artwork }) => {\n  const { dispatch } = useStore();\n\n  const findCurrentArtwork = () => {\n    dispatch({ type: \"updateCurrentArtwork\", artDetails: artwork  })\n  }\n\n  return (\n    <Link to={`/expanded-view/${artwork.title}`}>\n      <img\n        data-testid=\"artwork-preview\"\n        onClick={findCurrentArtwork}\n        className=\"preview-image\"\n        src={artwork.primaryImageSmall}\n        alt={artwork.title}\n      />\n    </Link>\n  );\n}","import React from 'react'\nimport './FavoritesPage.css'\nimport { useStore } from \"../store\";\nimport { ArtWorkPreview } from \"../ArtWorkPreview/ArtWorkPreview.js\";\n\nexport const FavoritesPage = () => {\n  const { state } = useStore();\n\n  return (\n    <section className=\"FavoritesPage\">\n      <h1>Favorites</h1>\n      <div className=\"images-container\" data-testid=\"fave-images-container\">\n        {!state.favorites.length ? (\n          <img\n            className=\"blank-canvas\"\n            alt=\"blank canvas symbolizing an empty favorites page\"\n            src=\"empty-canvas.png\"\n          />\n        ) : (\n          state.favorites.map((fave) => (\n            <ArtWorkPreview artwork={fave} key={fave.objectID} />\n          ))\n        )}\n      </div>\n    </section>\n  );\n}","import React, { useEffect } from \"react\";\nimport { useStore } from \"../store\";\nimport \"./DailyCurationTitle.css\";\n\n\nexport const DailyCurationTitle = () => {\n  const { state, dispatch } = useStore();\n  useEffect(() => {\n    dispatch({ type: \"findRandomTopic\" });\n    return () => {\n      dispatch({ type: \"resetRandomTopic\" });\n    }\n  }, [])\n  \n  return (\n    <div className=\"daily-curation-title\">\n      <p>\n        Explore a collection of art chosen around a daily theme. Today find\n        inspiration through\n      </p>\n      <h1>{state.dailyCurationTopic}s</h1>\n    </div>\n  );\n}","const fetchLink =\n  \"https://collectionapi.metmuseum.org/public/collection/\";\n\nexport const getDailyCollectionIds = async (theme) => {\n         try {\n           let response = await fetch(\n             `${fetchLink}v1/search?medium=Paintings&search?isOnView=true&q=${theme}`);\n           let data = await response.json();\n           return data;\n         } catch (error) {\n           console.log(error);\n         }\n       };\n\nexport const getDailyCollection = async (ids) => {\n         try {\n           let featuredCollection = await Promise.all(\n             ids.map(async (id) => {\n               let collectionsRes = await fetch(\n                 `${fetchLink}v1/objects/${id}`);\n               return collectionsRes.json();\n             })\n           );\n           return featuredCollection;\n         } catch (error) {\n           console.log(error);\n         }\n       };\n\nexport const getOtherArtByArtist = async (artist) => {\n  try {\n    let response = await fetch(`${fetchLink}v1/search?artistOrCulture=true&q=${artist}`);\n    let data = await response.json();\n    return data;\n  }\n  catch (error) {\n      console.log(error);\n    }\n}\n\nexport const fetchByArtistOrCulture = async (query) => {\n  try {\n    let response = await fetch(`${fetchLink}v1/search?hasImages=true&artistOrCulture=true&q=${query}`);\n    let data = await response.json();\n    return data;\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport const fetchByArtistOrCultureAndOnDisplay = async (query) => {\n  try {\n    let response = await fetch(\n      `${fetchLink}v1/search?isOnView=true&hasImages=true&artistOrCulture=true&q=${query}`\n    );\n    let data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const fetchByMedium = async (medium, subCats) => {\n  try {\n    let response = await fetch(\n      `${fetchLink}v1/search?medium=${medium}&q=${medium}`\n    );\n    let data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}","import React, { useEffect, useState } from 'react'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n import Loader from \"react-loader-spinner\";\nimport './DailyCuration.css'\nimport {\n  getDailyCollectionIds,\n  getDailyCollection,\n  fetchByArtistOrCulture,\n  fetchByArtistOrCultureAndOnDisplay,\n  fetchByMedium\n} from \"../apiCalls\";\nimport { useStore } from \"../store\";\nimport { ArtWorkPreview } from \"../ArtWorkPreview/ArtWorkPreview\";\n\n\nexport const DailyCuration = ({ page }) => {\n  const { state } = useStore();\n  const [collection, updateCollection] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  let dataObjects;\n  \n  useEffect(() => {\n    fetchData();\n    return () => {\n      updateCollection([]);\n      setIsLoading(true);\n    };\n  }, [state]); \n  \n  const fetchData = async () => {\n    if (page === \"daily-curation\") {\n      let topic = state.dailyCurationTopic;\n      let data = await getDailyCollectionIds(topic);\n      if (data.objectIDs) data.objectIDs = await data.objectIDs.splice(0, 50);\n      dataObjects = await getDailyCollection(data.objectIDs);\n      updateCollection(dataObjects);\n      setIsLoading(false)\n    }\n    if (page === \"culture-or-artist\") {      \n      let artworkIds = await fetchByArtistOrCulture(state.cultureOrArtistQuery.search);\n      if (artworkIds.total > 300) {\n        artworkIds.objectIDs = artworkIds.objectIDs.splice(0, 300);\n      }\n      dataObjects = await getDailyCollection(artworkIds.objectIDs);\n      await filterByDisplay()\n      await updateCollection(dataObjects);\n      await setIsLoading(false);      \n    }\n    if (page === \"medium\") {      \n      fetchByMediumQuery()\n    }\n  };\n\n  const fetchByMediumQuery = async () => {    \n    let artworkIds = await fetchByMedium(state.mediumQuery.search);\n      if (artworkIds.total > 300) {\n        artworkIds.objectIDs = artworkIds.objectIDs.splice(0, 300);\n      }\n    dataObjects = await getDailyCollection(artworkIds.objectIDs);\n      await filterByDisplay()\n      await updateCollection(dataObjects);\n      await setIsLoading(false);   \n  }\n\n  const filterByDisplay = async () => {\n    if (state.filterByDisplay) {\n     let artworkIds = await fetchByArtistOrCultureAndOnDisplay(state.cultureOrArtistQuery.search);\n      if (artworkIds.total > 300) {\n        artworkIds.objectIDs = artworkIds.objectIDs.splice(0, 300);\n      }\n      dataObjects = await getDailyCollection(artworkIds.objectIDs);\n      await setIsLoading(false);\n    }\n  }\n  \n  return (\n    <>\n      {collection && state.cultureOrArtistQuery && (\n        <p className=\"results-message\">Results for \"{state.cultureOrArtistQuery.search}\"</p>\n      )}\n      {collection && state.mediumQuery && (\n        <p className=\"results-message\">Results for \"{state.mediumQuery.search}\"</p>\n      )}\n      <div className=\"images-container\" data-testid=\"images-container\">\n        {isLoading && (\n          <Loader type=\"Hearts\" color=\"black\" height={100} width={100} />\n        )}\n        {collection &&\n          collection.map((artwork) => (\n            <ArtWorkPreview artwork={artwork} key={artwork.objectID} />\n          ))}\n        {!collection && state.cultureOrArtistQuery && <p>No results found</p>}\n        {!collection && state.mediumQuery && <p className=\"results-message\">No results found</p>}\n      </div>\n    </>\n  );\n\n  }\n\n","import React from 'react'\nimport './ExpandedView.css'\nimport { useStore } from \"../store\";\nimport like from './like.png'\nimport notLiked from './not-liked.png'\n\n\nexport const ExpandedView = ({ artwork }) => {\n  const { state, dispatch } = useStore();\n\n  const toggleFavorite = () => {\n    if ((state.favorites.some(fave => fave.objectID === artwork.objectID))) {\n      dispatch({ type: \"deleteFromFavorites\", artDetails: artwork });\n    }\n    if (!(state.favorites.some(fave => fave.objectID === artwork.objectID))) {\n      dispatch({ type: \"addToFavorites\", artDetails: artwork });\n    }    \n  }\n\n  return (\n    <div className=\"ExpandedView\">\n      <img\n        className=\"expanded-view-image\"\n        src={artwork.primaryImageSmall}\n        alt={artwork.title}\n      />\n      <div className=\"artwork-details\">\n        <div className=\"title-container-expanded\">\n          <h1>{artwork.title}</h1>\n          <img\n            onClick={toggleFavorite}\n            alt={\n              state.favorites.some((fave) => fave.objectID === artwork.objectID)\n                ? \"Icon for favorited artwork\"\n                : \"Icon for artwork not favorited\"\n            }\n            className=\"heart-icon\"\n            src={\n              state.favorites.some((fave) => fave.objectID === artwork.objectID)\n                ? like\n                : notLiked\n            }\n          />\n        </div>\n        {artwork.artistDisplayName && (\n          <p>\n            <span>{artwork.artistDisplayName}</span> {artwork.artistDisplayBio}\n          </p>\n        )}\n        <p>\n          <span>Date:</span> {artwork.objectDate}\n        </p>\n        <p>\n          <span>Medium:</span> {artwork.medium}\n        </p>\n        <p>\n          <span>Dimensions:</span> {artwork.dimensions}\n        </p>\n        <p>\n          <a href={artwork.objectURL} target=\"_blank\">\n            Read more at the Met\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react'\nimport './Filter.css'\nimport { useStore } from \"../store\";\nimport goIcon from \"./go.png\"\n\n\nexport const Filter = ({ page }) => {\n  const [searchTerms, updateSearch] = useState({search: ''})\n  const { dispatch } = useStore()\n\n  useEffect(() => {\n    return () => {\n      dispatch({ type: \"updateCultureOrArtistQuery\", cultureOrArtistQuery: \"\" })\n      dispatch({ type: \"updateMediumQuery\", mediumQuery: \"\" })\n    }\n  }, [])\n\n  const handleChange = (e) => {\n    if (page === \"medium\") {\n      const name = e.target.name;      \n      const value = e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1);\n      const search = {[name]: value}\n      updateSearch(search)\n    } else {\n      const name = e.target.name;\n      const value = e.target.value;\n      const search = { [name]: value };\n      updateSearch(search);\n    }\n  }\n\n  const handleClick = () => {\n    if (page === \"culture-or-artist\") {\n      dispatch({ type: \"updateCultureOrArtistQuery\", cultureOrArtistQuery: searchTerms });\n    }\n    if (page === \"medium\") {\n      dispatch({ type: \"updateMediumQuery\", mediumQuery: searchTerms });\n    }\n    updateSearch({search: ''});\n  }\n\n  const filterByDisplay = (e) => {\n    if (e.target.checked) {\n      dispatch({ type: \"updateFilterByDisplay\", filterByDisplay: true });\n    }\n    if (!e.target.checked) {\n      dispatch({ type: \"updateFilterByDisplay\", filterByDisplay: false });\n    }\n  }\n\n  return (\n    <section className=\"Filter\">\n      <h1>\n        Explore by{\" \"}\n        {page === \"culture-or-artist\" ? \"culture or artist\" : \"medium\"}\n      </h1>\n      <form className=\"filter-form\">\n        <div className=\"input-container\">\n          <input\n            onChange={handleChange}\n            className=\"search-input\"\n            type=\"text\"\n            value={searchTerms.search}\n            name=\"search\"\n            placeholder={\n              page === \"culture-or-artist\"\n                ? \"French, Spanish, Vincent Van Gogh, Edgar Degas, etc.\"\n                : \"ceramics, furniture, paintings, sculpture, textiles, etc\"\n            }\n          />\n          <img\n            className=\"search-icon\"\n            alt=\"search icon arrow\"\n            src={goIcon}\n            role=\"button\"\n            aria-pressed=\"false\"\n            tabIndex=\"0\"\n            onClick={handleClick}\n            onKeyDown={handleClick}\n          />\n        </div>\n        <div className=\"on-display-checkbox\">\n          <label htmlFor=\"on-display\">\n            View only artwork on display at the Met\n          </label>\n          <input type=\"checkbox\" id=\"on-display\" name=\"on-display\" onClick={filterByDisplay}/>\n        </div>\n      </form>\n    </section>\n  );\n}","import React from 'react'\nimport './NothingSelectedAlert.css'\n\nexport const NothingSelectedAlert = ({ page }) => {\n  return (\n    <div className={`NothingSelectedAlert `+ page} >\n      <h2>{page === 'culture-or-artist' ? \"discover new art by searching by artist name or culture above\" :\n        `discover new art by searching a ${page} above`}</h2>\n    </div>\n  );\n}","import React, { useEffect, useState} from 'react'\nimport './OtherWorkByArtist.css'\nimport { getOtherArtByArtist, getDailyCollection } from \"../apiCalls\";\nimport { Link } from \"react-router-dom\";\nimport { useStore } from \"../store\";\nimport ScrollContainer from \"react-indiana-drag-scroll\";\n\n\nexport const OtherWorkByArtist = ({ artwork }) => {\n  const { dispatch } = useStore()\n  let artistLastName = artwork.artistDisplayName.split(\" \");\n  artistLastName = artistLastName[artistLastName.length - 1];\n  const [artSelection, updateArtSelection] = useState([])\n  \n  const fetchData = async () => {\n    let data = await getOtherArtByArtist(artistLastName);\n    let index = data.objectIDs.indexOf(artwork.objectID);\n    data.objectIDs.splice(index, 1)\n    let collection = await getDailyCollection(data.objectIDs);\n    await updateArtSelection(collection)\n  }\n  useEffect(() => {\n    fetchData()\n  }, [artwork])\n\n  const findCurrentArtwork = (art) => {\n    dispatch({ type: \"updateCurrentArtwork\", artDetails: art });\n  };\n\n\n  return (\n    <section className=\"other-work-section\">\n      {artSelection && <h3>Other work by this artist:</h3>}\n      <ScrollContainer className=\"art-by-artist-container dragscroll\">\n        {artSelection &&\n          artSelection.map((art) => (\n            <Link to={`/expanded-view/${art.title}`} key={art.objectID}>\n              <img\n                onClick={() => findCurrentArtwork(art)}\n                src={art.primaryImageSmall}\n                alt={art.title}\n              />\n            </Link>\n          ))}\n      </ScrollContainer>\n    </section>\n  );\n  \n}","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { NavBar } from '../NavBar/NavBar'\nimport { FavoritesPage } from '../FavoritesPage/FavoritesPage'\nimport { Switch, Route } from \"react-router-dom\";\nimport { DailyCurationTitle } from '../DailyCurationTitle/DailyCurationTitle'\nimport { DailyCuration } from '../DailyCuration/DailyCuration'\nimport { ExpandedView } from '../ExpandedView/ExpandedView'\nimport { Filter } from '../Filter/Filter'\nimport { NothingSelectedAlert } from '../NothingSelectedAlert/NothingSelectedAlert'\nimport { OtherWorkByArtist } from '../OtherWorkByArtist/OtherWorkByArtist'\nimport { useStore } from \"../store\";\n\n\nfunction App() {\n  const { state } = useStore();\n  \n  return (\n    <div className=\"App\">\n      <NavBar />\n      <main>\n        <Switch>\n          <Route path=\"/expanded-view/:artwork\">\n            <ExpandedView artwork={state.currentArtwork} />\n            <OtherWorkByArtist artwork={state.currentArtwork} />\n          </Route>\n          <Route path=\"/favorites\">\n            <FavoritesPage />\n          </Route>\n          <Route path=\"/culture_or_artist\">\n            <Filter page=\"culture-or-artist\" />\n            {!state.cultureOrArtistQuery && (\n              <NothingSelectedAlert page=\"culture-or-artist\" />\n            )}\n            {state.cultureOrArtistQuery && (\n              <DailyCuration page=\"culture-or-artist\" />\n            )}\n          </Route>\n          <Route path=\"/medium\">\n            <Filter page=\"medium\" />\n            {!state.mediumQuery && <NothingSelectedAlert page=\"medium\" />}\n            {state.mediumQuery && <DailyCuration page=\"medium\" />}\n          </Route>\n          <Route exact path=\"/\">\n            <DailyCurationTitle />\n            <DailyCuration page=\"daily-curation\" />\n          </Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { StoreProvider } from \"./store\";\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <StoreProvider>\n        <App />\n      </StoreProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/like.2c4cdd94.png\";","module.exports = __webpack_public_path__ + \"static/media/not-liked.aaa3d4a0.png\";","module.exports = __webpack_public_path__ + \"static/media/go.d8cdc76e.png\";"],"sourceRoot":""}